<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx.xsd
                            http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop.xsd
                            ">
    <context:component-scan base-package="com.yxw.aop_txJdbc"/>

    <!-- 加载 Properties 配置文件 -->
    <context:property-placeholder location="classpath:com/yxw/aop_txJdbc/db.properties"/>

    <!-- 1.实例化连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${driverClass}"></property>
        <property name="jdbcUrl" value="${jdbcUrl}"></property>
        <property name="user" value="${user}"></property>
        <property name="password" value="${password}"></property>
        <property name="initialPoolSize" value="${initialPoolSize}"></property>
        <property name="maxPoolSize" value="${maxPoolSize}"></property>
        <property name="acquireIncrement" value="${acquireIncrement}"></property>
    </bean>
    <!-- 2.创建JdbcTemplate 对象 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 3.实例化 dao 层对象 -->
    <!--<bean id="userDao_db" class="com.yxw.aop_jdbc.UserDao_db">
        <property name="jdbcTemplate" ref="jdbcTemplate"></property>
    </bean>-->

    <!-- 5. Spring 声明式事务管理控制 -->
    <!-- 5.1.配置事务管理器类 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!-- 5.2.事务通知配置，拦截到指定的方法后如何管理事务 -->
    <!-- save*  save开头的方法，是只读的事务 -->
    <!--   *    上面所有的方法都不满足时候，采用的事务控制规则 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" read-only="false" />
            <tx:method name="delete*" read-only="true"/>
            <tx:method name="*" read-only="false"/>
        </tx:attributes>
    </tx:advice>
    <!-- 5.3.事务AOP 配置 = 切入点表达式 + 应用上面的事务通知 -->
    <aop:config>
        <aop:pointcut id="px" expression="execution(* com.yxw.aop_txJdbc.*Service.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="px"/>
    </aop:config>

</beans>












